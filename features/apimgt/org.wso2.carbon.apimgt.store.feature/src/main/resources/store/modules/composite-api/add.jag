<%
user = jagg.getUser();
var APIIdentifier = Packages.org.wso2.carbon.apimgt.api.model.APIIdentifier;

var checkIfResourceExists = function (api) {
    var success, log = new Log(),
            provider = jagg.module("manager").getAPIStoreObj();
    try {
        success = provider.checkIfResourceExists(api);
        if (log.isDebugEnabled()) {
            log.debug("checkIfResourceExists : " + api.name);
        }
        return success;
    } catch (e) {
        log.error(e.message);
        return {
            error:true,
            message:e.message.split(":")[1]
        };
    }
};

var getSwagger12Resource = function (api) {
    var success, log = new Log(),
            provider = jagg.module("manager").getAPIStoreObj();
    try {
        success = provider.getSwagger12Resource(api);
        if (log.isDebugEnabled()) {
            log.debug("getSwagger12Resource : " + api.name + "-" + api.version);
        }
        return success;        
    } catch (e) {
        log.error(e.message);
        return {
            error:true,
            message:e.message.split(":")[1]
        };
    }
};

var createCompositeAPI = function (api) {
    var success, log = new Log(),
            provider = jagg.module("manager").getAPIStoreObj();
    try {
        success = provider.createCompositeAPI(api);
        if (log.isDebugEnabled()) {
            log.debug("createAPI : " + api.name + "-" + api.version);
        }
        if(success){
        return {
            error:false
        };
        }else{
        return {
            error:true
        }; }
    } catch (e) {
        log.error(e);
        return {
            error:true,
            message:e.message.split(":")[1]
        };
    }
};

var updateCompositeAPIDesign = function (api) {
    var success, log = new Log(),
            provider = jagg.module("manager").getAPIStoreObj();
    try {
        success = provider.updateCompositeAPIDesign(api);
        if (log.isDebugEnabled()) {
            log.debug("updateAPIDesign : " + api.name + "-" + api.version);
        }
        if(success){
        return {
            error:false
        };
        }else{
        return {
            error:true
        }; }
    } catch (e) {
        log.error(e);
        return {
            error:true,
            message:e.message.split(":")[1]
        };
    }
};

var getGatewayURL = function (api) {
    var carbon = require('carbon');
    var gatewayURL, envs, result, log = new Log(),
            provider = jagg.module("manager").getAPIStoreObj();
    try {
        envs = provider.getEnvironments();
        if (log.isDebugEnabled()) {
            log.debug("Invoke getEnvironments()" );
        }

        if(envs != null) {
            for (var i = 0; i < envs.length; i++) {
                if (envs[i].apiConsole == true) {
                    result = envs[i].serverURL;
                }
            }

            if(result != null || result != "") {
                var hasPort = false;
                // Check if carbon.server.address url and gateway url is the same and use gateway url as 'localhost'
                // to avoid ssl host name verification error on localhost
                var resultComponents = result.split(/:\/{2}|:|\//);
                var carbonServerAddr = carbon.server.address(resultComponents[0]);
                var serverComponents = carbonServerAddr.split(/:\/{2}|:|\//);

                //check whether gateway url has a port
                if (!isNaN(parseFloat(resultComponents[2])) && isFinite(resultComponents[2])) {
                    hasPort = true;
                }

                if (serverComponents[1] == resultComponents[1]) {
                    if (hasPort) {
                        gatewayURL = resultComponents[0] + "://localhost:" + resultComponents[2];
                    } else {
                        gatewayURL = resultComponents[0] + "://localhost";
                    }

                } else {
                    if (hasPort) {
                        gatewayURL = resultComponents[0] + "://" + resultComponents[1] + ":" + resultComponents[2];
                    } else {
                        gatewayURL = resultComponents[0] + "://" + resultComponents[1];
                    }

                }
                return {
                    error: false,
                    "gatewayURL": gatewayURL
                };
            }
        }
        return {
            error: "Unable to retrieve gateway urls."
        };
    } catch (e) {
        log.error(e.message);
        return {
            error:e
        };
    }
};
%>
